name: Quick Test

on:
  push:
    branches: [ main, master, develop, auto_test, 'feature/*', 'test/*' ]
  pull_request:
    branches: [ main, master, develop, auto_test, 'feature/*', 'test/*' ]


jobs:
  quick-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y gfortran libopenblas-dev liblapack-dev

    - name: Configure and build
      run: |
        ./configure --prefix=$PWD/install
        
        # Check if app/src directory exists before build
        echo "=== Checking app/src directory before build ==="
        ls -la app/ || echo "app/ directory not found"
        ls -la app/src/ || echo "app/src/ directory not found"
        
        # Build with verbose output
        echo "=== Building with verbose output ==="
        make -j$(nproc) V=1 || {
          echo "Parallel build failed, trying single-threaded build..."
          make -j1 V=1 || {
            echo "Single-threaded build also failed, trying clean build..."
            make clean
            make -j1 V=1
          }
        }
        
        # Check if ShiftK.out was built
        echo "=== Checking if ShiftK.out was built ==="
        if [ -f "app/src/ShiftK.out" ]; then
          echo "SUCCESS: ShiftK.out found in app/src/"
          ls -la app/src/ShiftK.out
          file app/src/ShiftK.out
          # Check if it's a libtool wrapper script
          if head -1 app/src/ShiftK.out | grep -q "#!/bin/sh"; then
            echo "ShiftK.out is a libtool wrapper script"
            # Check for the actual executable in .libs directory
            if [ -f "app/src/.libs/ShiftK.out" ]; then
              echo "Actual executable found in app/src/.libs/ShiftK.out"
              ls -la app/src/.libs/ShiftK.out
              file app/src/.libs/ShiftK.out
            else
              echo "ERROR: Actual executable not found in .libs directory"
            fi
          fi
        else
          echo "ERROR: ShiftK.out not found in app/src/"
          echo "Checking app directory structure..."
          ls -la app/ || echo "app/ directory not found"
          ls -la app/src/ || echo "app/src/ directory not found"
          echo "Searching for any ShiftK executable..."
          find . -name "ShiftK*" -type f || echo "No ShiftK executable found"
          echo "Build completed but ShiftK.out was not created"
        fi
        
        make install

    - name: Run quick tests
      run: |
        cd test
        make
        # Run only essential tests for quick feedback
        echo "Running quick test suite..."
        ./solve_cc.x < complex_freq.in > solve_cc.log 2>&1
        ./solve_rr.x < real_freq.in > solve_rr.log 2>&1
        
        # Check if tests completed successfully
        if grep -q "Converged\|converged\|SUCCESS" solve_cc.log; then
          echo "✓ solve_cc.x test passed"
        else
          echo "✗ solve_cc.x test may have failed"
          cat solve_cc.log
        fi
        
        if grep -q "Converged\|converged\|SUCCESS" solve_rr.log; then
          echo "✓ solve_rr.x test passed"
        else
          echo "✗ solve_rr.x test may have failed"
          cat solve_rr.log
        fi

    - name: Test sample application
      run: |
        # Find ShiftK.out executable (check installed version first, then built version)
        SHIFTK_PATH=""
        
        # First check if ShiftK.out was installed
        if [ -f "install/bin/ShiftK.out" ] && [ -x "install/bin/ShiftK.out" ]; then
          SHIFTK_PATH="install/bin/ShiftK.out"
          echo "Found installed ShiftK.out at: $SHIFTK_PATH"
        # Then check if ShiftK.out was built in app/src
        elif [ -f "app/src/ShiftK.out" ] && [ -x "app/src/ShiftK.out" ]; then
          if head -1 app/src/ShiftK.out | grep -q "#!/bin/sh"; then
            # It's a libtool wrapper script, use the actual executable
            if [ -f "app/src/.libs/ShiftK.out" ] && [ -x "app/src/.libs/ShiftK.out" ]; then
              SHIFTK_PATH="app/src/.libs/ShiftK.out"
              echo "Found actual executable in .libs directory: $SHIFTK_PATH"
            else
              echo "ERROR: Actual executable not found in .libs directory"
              exit 1
            fi
          else
            SHIFTK_PATH="app/src/ShiftK.out"
            echo "Found built ShiftK.out at: $SHIFTK_PATH"
          fi
        else
          echo "ERROR: ShiftK.out not found in install/bin/ or app/src/"
          echo "Checking available files..."
          find . -name "ShiftK*" -type f || echo "No ShiftK executable found"
          exit 1
        fi
        
        echo "Using ShiftK: $SHIFTK_PATH"
        
        # Get absolute path before changing directory
        if [ -f "$SHIFTK_PATH" ] && [ -x "$SHIFTK_PATH" ]; then
          ABSOLUTE_SHIFTK_PATH=$(realpath "$SHIFTK_PATH" 2>/dev/null || echo "$SHIFTK_PATH")
          echo "Absolute path: $ABSOLUTE_SHIFTK_PATH"
          echo "File exists: $([ -f "$ABSOLUTE_SHIFTK_PATH" ] && echo "YES" || echo "NO")"
          echo "File executable: $([ -x "$ABSOLUTE_SHIFTK_PATH" ] && echo "YES" || echo "NO")"
        else
          echo "ERROR: ShiftK executable not accessible at: $SHIFTK_PATH"
          echo "File exists: $([ -f "$SHIFTK_PATH" ] && echo "YES" || echo "NO")"
          echo "File executable: $([ -x "$SHIFTK_PATH" ] && echo "YES" || echo "NO")"
          exit 1
        fi
        
        cd app/sample/denovo
        echo "Current directory: $(pwd)"
        
        if [ -f "$ABSOLUTE_SHIFTK_PATH" ] && [ -x "$ABSOLUTE_SHIFTK_PATH" ]; then
          echo "Executing ShiftK.out with proper arguments..."
          timeout 30s "$ABSOLUTE_SHIFTK_PATH" namelist.def lBiCG || echo "Sample test completed"
          test -f dynamicalG.dat && echo "✓ Sample application test passed"
        else
          echo "ERROR: ShiftK executable not accessible at: $ABSOLUTE_SHIFTK_PATH"
          echo "File exists: $([ -f "$ABSOLUTE_SHIFTK_PATH" ] && echo "YES" || echo "NO")"
          echo "File executable: $([ -x "$ABSOLUTE_SHIFTK_PATH" ] && echo "YES" || echo "NO")"
        fi

name: CI

on:
  push:
    branches: [ main, develop, auto_test, 'feature/*', 'test/*' ]
  pull_request:
    branches: [ main, develop, auto_test, 'feature/*', 'test/*' ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        fortran-compiler: [gfortran]
        include:
          - os: ubuntu-latest
            fortran-compiler: gfortran
            blas-lib: libblas-dev
            lapack-lib: liblapack-dev
          - os: macos-latest
            fortran-compiler: gfortran
            blas-lib: openblas
            lapack-lib: openblas

    steps:
    - uses: actions/checkout@v4

    - name: Set up Fortran (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gfortran ${{ matrix.blas-lib }} ${{ matrix.lapack-lib }}

    - name: Set up Fortran (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install Homebrew if not present
        if ! command -v brew &> /dev/null; then
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zshrc
          eval "$(/opt/homebrew/bin/brew shellenv)"
        fi
        # Install GCC with Fortran support and OpenBLAS
        brew install gcc openblas || true
        # Set up OpenBLAS environment variables
        export LDFLAGS="-L/opt/homebrew/opt/openblas/lib"
        export CPPFLAGS="-I/opt/homebrew/opt/openblas/include"
        export PKG_CONFIG_PATH="/opt/homebrew/opt/openblas/lib/pkgconfig"
        # Verify gfortran installation
        which gfortran
        gfortran --version
        # Add GCC to PATH for current session
        export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"
        echo "/opt/homebrew/bin" >> $GITHUB_PATH
        echo "/usr/local/bin" >> $GITHUB_PATH
        # Export OpenBLAS environment variables for subsequent steps
        echo "LDFLAGS=-L/opt/homebrew/opt/openblas/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/opt/homebrew/opt/openblas/include" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/opt/homebrew/opt/openblas/lib/pkgconfig" >> $GITHUB_ENV

    - name: Configure
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          # Set up environment for macOS
          export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"
          export FC=gfortran
          export F77=gfortran
          export CC=gcc
          # Set up OpenBLAS environment variables
          export LDFLAGS="-L/opt/homebrew/opt/openblas/lib"
          export CPPFLAGS="-I/opt/homebrew/opt/openblas/include"
          export PKG_CONFIG_PATH="/opt/homebrew/opt/openblas/lib/pkgconfig"
          # Verify compilers are found
          echo "FC: $(which gfortran)"
          echo "CC: $(which gcc)"
          echo "LDFLAGS: $LDFLAGS"
          echo "CPPFLAGS: $CPPFLAGS"
          gfortran --version
          gcc --version
          # Configure with explicit paths and OpenBLAS
          ./configure --prefix=$PWD/install --with-blas=openblas FC=gfortran F77=gfortran CC=gcc LDFLAGS="$LDFLAGS" CPPFLAGS="$CPPFLAGS"
        else
          ./configure --prefix=$PWD/install
        fi

    - name: Build
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          # Set up environment for macOS
          export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"
          export LDFLAGS="-L/opt/homebrew/opt/openblas/lib"
          export CPPFLAGS="-I/opt/homebrew/opt/openblas/include"
          # macOS doesn't have nproc, use sysctl instead
          CORES=$(sysctl -n hw.ncpu)
          make -j$CORES
        else
          make -j$(nproc)
        fi

    - name: Install
      run: |
        make install

    - name: Run library tests
      run: |
        cd test
        make
        # Run comprehensive test suite
        echo "Running comprehensive test suite..."
        ./run_tests.sh

    - name: Test sample application
      run: |
        cd app/sample/denovo
        $PWD/../../install/bin/ShiftK.out namelist.def
        # Check if output files are generated
        test -f dynamicalG.dat
        test -f ResVec.dat0
        test -f TriDiagComp.dat

    - name: Test sample application (from_file)
      run: |
        cd app/sample/from_file
        $PWD/../../install/bin/ShiftK.out namelist.def
        # Check if output files are generated
        test -f dynamicalG.dat
        test -f ResVec.dat0
        test -f TriDiagComp.dat

    - name: Collect test artifacts
      if: always()
      run: |
        mkdir -p test-artifacts
        # Copy test logs
        find test -name "*.log" -exec cp {} test-artifacts/ \;
        # Copy restart files
        find test -name "restart.dat" -exec cp {} test-artifacts/ \;
        # Copy sample outputs
        find app/sample -name "*.dat" -exec cp {} test-artifacts/ \;
        # Create test summary
        echo "# Test Results Summary" > test-artifacts/README.md
        echo "" >> test-artifacts/README.md
        echo "Generated on: $(date)" >> test-artifacts/README.md
        echo "OS: ${{ matrix.os }}" >> test-artifacts/README.md
        echo "Compiler: ${{ matrix.fortran-compiler }}" >> test-artifacts/README.md
        echo "" >> test-artifacts/README.md
        echo "## Test Logs" >> test-artifacts/README.md
        ls -la test-artifacts/*.log >> test-artifacts/README.md || true

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}
        path: test-artifacts/
        retention-days: 30

  test-mpi:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up MPI environment
      run: |
        sudo apt-get update
        sudo apt-get install -y gfortran libblas-dev liblapack-dev libopenmpi-dev

    - name: Configure with MPI
      run: |
        ./configure --prefix=$PWD/install --with-mpi

    - name: Build with MPI
      run: |
        make -j$(nproc)

    - name: Install with MPI
      run: |
        make install

    - name: Test MPI functionality
      run: |
        cd test
        make
        # Test with MPI if available
        if command -v mpirun &> /dev/null; then
          echo "Testing with MPI..."
          mpirun -np 2 ./solve_cc.x < complex_freq.in || echo "MPI test failed, continuing..."
        fi

name: Extended Test Matrix

on:
  push:
    branches: [ main, develop, auto_test, 'feature/*', 'test/*' ]
  pull_request:
    branches: [ main, develop, auto_test, 'feature/*', 'test/*' ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-latest, macos-latest]
        fortran-compiler: [gfortran]
        blas-variant: [reference, openblas]
        include:
          - os: ubuntu-20.04
            fortran-compiler: gfortran
            blas-variant: reference
          - os: ubuntu-22.04
            fortran-compiler: gfortran
            blas-variant: openblas
          - os: ubuntu-latest
            fortran-compiler: gfortran
            blas-variant: openblas
          - os: macos-latest
            fortran-compiler: gfortran
            blas-variant: openblas

    steps:
    - uses: actions/checkout@v4

    - name: Set up Fortran environment (Ubuntu)
      if: matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gfortran
        if [ "${{ matrix.blas-variant }}" = "reference" ]; then
          sudo apt-get install -y libblas-dev liblapack-dev
        else
          sudo apt-get install -y libopenblas-dev liblapack-dev
        fi

    - name: Set up Fortran environment (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install Homebrew if not present
        if ! command -v brew &> /dev/null; then
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zshrc
          eval "$(/opt/homebrew/bin/brew shellenv)"
        fi
        # Install GCC with Fortran support and OpenBLAS
        brew install gcc openblas
        # Verify gfortran installation
        which gfortran
        gfortran --version
        # Add GCC to PATH for current session
        export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"
        echo "/opt/homebrew/bin" >> $GITHUB_PATH
        echo "/usr/local/bin" >> $GITHUB_PATH

    - name: Configure build
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          # Set up environment for macOS
          export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"
          export FC=gfortran
          export F77=gfortran
          export CC=gcc
          # Verify compilers are found
          echo "FC: $(which gfortran)"
          echo "CC: $(which gcc)"
          gfortran --version
          gcc --version
          # Configure with explicit paths
          ./configure --prefix=$PWD/install --with-blas=openblas FC=gfortran F77=gfortran CC=gcc
        elif [ "${{ matrix.blas-variant }}" = "openblas" ]; then
          ./configure --prefix=$PWD/install --with-blas=openblas
        else
          ./configure --prefix=$PWD/install
        fi

    - name: Build
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          # Set up environment for macOS
          export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"
          # macOS doesn't have nproc, use sysctl instead
          CORES=$(sysctl -n hw.ncpu)
          make -j$CORES
        else
          make -j$(nproc)
        fi

    - name: Install
      run: |
        make install

    - name: Run tests
      run: |
        cd test
        make
        ./run_tests.sh

    - name: Test sample applications
      run: |
        # Test denovo sample
        cd app/sample/denovo
        $PWD/../../install/bin/ShiftK.out namelist.def
        test -f dynamicalG.dat
        
        # Test from_file sample
        cd ../from_file
        $PWD/../../install/bin/ShiftK.out namelist.def
        test -f dynamicalG.dat

    - name: Performance benchmark
      run: |
        cd test
        echo "Running performance benchmarks..."
        # Create larger test case for benchmarking
        cat > benchmark.in << EOF
        &input
              ndim = 100
                nl = 100
                nz = 10
           itermax = 1000
         threshold = 1d-6
          rnd_seed = 42
        /
        EOF
        
        # Add some complex frequencies
        for i in {1..10}; do
          echo "($i.0, 0.1)" >> benchmark.in
        done
        
        # Run benchmark
        time ./solve_cc.x < benchmark.in > benchmark.log 2>&1 || echo "Benchmark completed"

    - name: Collect results
      if: always()
      run: |
        mkdir -p results
        # Copy all test outputs
        find . -name "*.log" -exec cp {} results/ \;
        find . -name "*.dat" -exec cp {} results/ \;
        find . -name "restart.dat" -exec cp {} results/ \;
        
        # Create summary
        echo "# Test Results for ${{ matrix.os }} with ${{ matrix.blas-variant }}" > results/summary.md
        echo "Generated: $(date)" >> results/summary.md
        echo "OS: ${{ matrix.os }}" >> results/summary.md
        echo "BLAS: ${{ matrix.blas-variant }}" >> results/summary.md
        echo "" >> results/summary.md
        echo "## Files Generated" >> results/summary.md
        ls -la results/ >> results/summary.md

    - name: Upload results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.blas-variant }}
        path: results/
        retention-days: 7

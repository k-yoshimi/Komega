name: Python Library Tests

on:
  push:
    branches: [ python, master, develop ]
    paths:
      - 'python_komega/**'
      - '.github/workflows/python-tests.yml'
  pull_request:
    branches: [ python, master, develop ]
    paths:
      - 'python_komega/**'
      - '.github/workflows/python-tests.yml'

jobs:
  python-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy scipy pytest
    
    - name: Run basic functionality tests
      run: |
        cd python_komega
        python test_komega.py
    
    - name: Run Fortran compatibility tests
      run: |
        cd python_komega
        python test_fortran_compatibility.py
    
    - name: Run detailed compatibility tests
      run: |
        cd python_komega
        python test_detailed_compatibility.py
    
    - name: Run comprehensive test suite
      run: |
        cd python_komega
        python run_tests.py --test-type all
    
    - name: Test individual solver types
      run: |
        cd python_komega
        python -c "
        from komega import create_solver, get_available_solvers
        print('Available solvers:', get_available_solvers())
        
        # Test each solver type
        for solver_type in get_available_solvers():
            print(f'Testing {solver_type} solver...')
            solver = create_solver(solver_type)
            print(f'✓ {solver_type} solver created successfully')
        "
    
    - name: Test solver initialization
      run: |
        cd python_komega
        python -c "
        import numpy as np
        from komega import create_solver
        
        # Test parameters
        ndim, nl, nz = 5, 5, 3
        itermax, threshold = 100, 1e-6
        
        # Test real solver
        solver_r = create_solver('cg_r')
        z_real = np.array([1.0, 2.0, 3.0])
        x_r = solver_r.init(ndim, nl, nz, z_real, itermax, threshold)
        print(f'✓ Real CG solver initialized: {x_r.shape}')
        solver_r.finalize()
        
        # Test complex solver
        solver_c = create_solver('bicg')
        z_complex = np.array([1.0 + 0.1j, 2.0 + 0.2j, 3.0 + 0.3j])
        x_c = solver_c.init(ndim, nl, nz, z_complex, itermax, threshold)
        print(f'✓ Complex BiCG solver initialized: {x_c.shape}')
        solver_c.finalize()
        "
    
    - name: Test mathematical operations
      run: |
        cd python_komega
        python -c "
        import numpy as np
        from komega import get_global_math
        
        math_ops = get_global_math()
        
        # Test vectors
        n = 5
        x_real = np.random.rand(n)
        y_real = np.random.rand(n)
        x_complex = np.random.rand(n) + 1j * np.random.rand(n)
        y_complex = np.random.rand(n) + 1j * np.random.rand(n)
        
        # Test dot products
        dot_real = math_ops.ddot(x_real, y_real)
        dotc_complex = math_ops.zdotc(x_complex, y_complex)
        dotu_complex = math_ops.zdotu(x_complex, y_complex)
        
        print(f'✓ Real dot product: {dot_real}')
        print(f'✓ Complex conjugate dot product: {dotc_complex}')
        print(f'✓ Complex dot product: {dotu_complex}')
        
        # Test scaling
        alpha_real = 2.0
        alpha_complex = 1.0 + 1j
        
        x_scaled = x_real.copy()
        math_ops.dscal(alpha_real, x_scaled)
        print(f'✓ Real scaling works')
        
        x_complex_scaled = x_complex.copy()
        math_ops.zscal(alpha_complex, x_complex_scaled)
        print(f'✓ Complex scaling works')
        "
    
    - name: Test value storage modules
      run: |
        cd python_komega
        python -c "
        import numpy as np
        from komega import get_global_vals_r, get_global_vals_c
        
        # Test real values
        vals_r = get_global_vals_r()
        z_real = np.array([1.0, 2.0, 3.0])
        vals_r.initialize(z_real, 100)
        print(f'✓ Real values initialized: {vals_r.get_pi_values().shape}')
        
        # Test complex values
        vals_c = get_global_vals_c()
        z_complex = np.array([1.0 + 0.1j, 2.0 + 0.2j, 3.0 + 0.3j])
        vals_c.initialize(z_complex, 100)
        print(f'✓ Complex values initialized: {vals_c.get_pi_values().shape}')
        "
    
    - name: Test vector storage modules
      run: |
        cd python_komega
        python -c "
        import numpy as np
        from komega import get_global_vecs_r, get_global_vecs_c
        
        # Test real vectors
        vecs_r = get_global_vecs_r()
        vecs_r.initialize(10, 5, 3, 100)
        print(f'✓ Real vectors initialized: v3={vecs_r.get_v3().shape}, p={vecs_r.get_p().shape}')
        
        # Test complex vectors
        vecs_c = get_global_vecs_c()
        vecs_c.initialize(10, 5, 3, 100)
        print(f'✓ Complex vectors initialized: v3={vecs_c.get_v3().shape}, p={vecs_c.get_p().shape}')
        "
    
    - name: Test solver information
      run: |
        cd python_komega
        python -c "
        from komega import get_available_solvers, get_solver_info
        
        solvers = get_available_solvers()
        print(f'Available solvers: {solvers}')
        
        for solver_type in solvers:
            info = get_solver_info(solver_type)
            print(f'✓ {solver_type}: {info[\"name\"]} - {info[\"description\"]}')
            print(f'  Data type: {info[\"data_type\"]}')
            print(f'  Supports restart: {info[\"supports_restart\"]}')
            print(f'  Supports MPI: {info[\"supports_mpi\"]}')
        "
    
    - name: Test error handling
      run: |
        cd python_komega
        python -c "
        from komega import create_solver
        
        # Test invalid solver type
        try:
            solver = create_solver('invalid_solver')
            print('✗ Should have raised ValueError for invalid solver')
        except ValueError as e:
            print(f'✓ Correctly raised ValueError: {e}')
        
        # Test solver operations without initialization
        solver = create_solver('bicg')
        try:
            solver.update([], [], [], [], [], [], [])
            print('✗ Should have raised RuntimeError for uninitialized solver')
        except RuntimeError as e:
            print(f'✓ Correctly raised RuntimeError: {e}')
        "
    
    - name: Test memory management
      run: |
        cd python_komega
        python -c "
        import numpy as np
        from komega import create_solver
        
        # Test multiple solver instances
        solvers = []
        for i in range(5):
            solver = create_solver('cg_r')
            z = np.array([1.0, 2.0, 3.0])
            x = solver.init(5, 5, 3, z, 100, 1e-6)
            solvers.append(solver)
        
        print(f'✓ Created {len(solvers)} solver instances')
        
        # Clean up
        for solver in solvers:
            solver.finalize()
        
        print('✓ All solvers finalized successfully')
        "
    
    - name: Test numerical stability
      run: |
        cd python_komega
        python -c "
        import numpy as np
        from komega import create_solver
        
        # Test with small numbers
        solver = create_solver('cg_r')
        z = np.array([1e-10, 1e-8, 1e-6])
        x = solver.init(3, 3, 3, z, 100, 1e-12)
        print('✓ Solver handles small numbers')
        solver.finalize()
        
        # Test with large numbers
        solver = create_solver('cg_r')
        z = np.array([1e6, 1e8, 1e10])
        x = solver.init(3, 3, 3, z, 100, 1e-6)
        print('✓ Solver handles large numbers')
        solver.finalize()
        "
    
    - name: Generate test report
      run: |
        cd python_komega
        echo "# Python Library Test Report" > test_report.md
        echo "" >> test_report.md
        echo "## Test Summary" >> test_report.md
        echo "- Python version: ${{ matrix.python-version }}" >> test_report.md
        echo "- Operating system: ${{ runner.os }}" >> test_report.md
        echo "- Test date: $(date)" >> test_report.md
        echo "" >> test_report.md
        echo "## Available Solvers" >> test_report.md
        python -c "
        from komega import get_available_solvers
        solvers = get_available_solvers()
        for solver in solvers:
            print(f'- {solver}')
        " >> test_report.md
        echo "" >> test_report.md
        echo "## Test Results" >> test_report.md
        echo "All tests passed successfully!" >> test_report.md
    
    - name: Upload test report
      uses: actions/upload-artifact@v4
      with:
        name: python-test-report-${{ matrix.python-version }}
        path: python_komega/test_report.md

  python-lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run flake8
      run: |
        cd python_komega
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run black (check only)
      run: |
        cd python_komega
        black --check --diff .
    
    - name: Run isort (check only)
      run: |
        cd python_komega
        isort --check-only --diff .
    
    - name: Run mypy
      run: |
        cd python_komega
        mypy . --ignore-missing-imports

  python-documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme
    
    - name: Generate documentation
      run: |
        cd python_komega
        # Create basic documentation structure
        mkdir -p docs
        echo "# Komega Python Library Documentation" > docs/README.md
        echo "" >> docs/README.md
        echo "This is the documentation for the Komega Python library." >> docs/README.md
        echo "" >> docs/README.md
        echo "## Installation" >> docs/README.md
        echo "See the main README.md for installation instructions." >> docs/README.md
        echo "" >> docs/README.md
        echo "## API Reference" >> docs/README.md
        echo "The library provides the following main components:" >> docs/README.md
        echo "" >> docs/README.md
        python -c "
        from komega import get_available_solvers, get_solver_info
        solvers = get_available_solvers()
        for solver in solvers:
            info = get_solver_info(solver)
            print(f'- **{solver}**: {info[\"name\"]} - {info[\"description\"]}')
        " >> docs/README.md
    
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: python-documentation
        path: python_komega/docs/
